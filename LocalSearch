function tsp_ls(distance_matrix) {
    let n = distance_matrix.length;
    if (n <= 1) return 0;

    let currentRoute = [...Array(n).keys()];
    shuffleArray(currentRoute);
    let pathVal = countPathLength(currentRoute, distance_matrix);

    const maxIterate = factorial(n); // or use a smaller number like n * n for practical purposes
    for (let iter = 0; iter < maxIterate; iter++) {
        let i = Math.floor(Math.random() * (n - 1));
        let k;
        do {
            k = Math.floor(Math.random() * (n - 1));
        } while (k === i);

        const newRoute = twoOptSwap(currentRoute, i, k);
        const newVal = countPathLength(newRoute, distance_matrix);
        if (newVal < pathVal) {
            currentRoute = newRoute;
            pathVal = newVal;
        }
    }
    return pathVal;
}

function twoOptSwap(route, i, k) {
    const newRoute = route.slice();
    while (i < k) {
        [newRoute[i], newRoute[k]] = [newRoute[k], newRoute[i]];
        i += 1;
        k -= 1;
    }
    return newRoute;
}

function countPathLength(route, distance_matrix) {
    let totalLength = 0;
    for (let i = 0; i < route.length - 1; i++) {
        totalLength += distance_matrix[route[i]][route[i + 1]];
    }
    totalLength += distance_matrix[route[route.length - 1]][route[0]];
    return totalLength;
}

function factorial(n) {
    if (n === 0) return 1;

    let fact = 1;
    for (let i = 1; i <= n; i++) {
        fact *= i;
    }

    return fact;
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

// Test code with performance timing

// Test 1: Simple case with 3 cities
let distanceMatrix1 = [
    [0, 10, 15],
    [10, 0, 35],
    [15, 35, 0]
];

let start = performance.now();
console.log("Test 1 Result:", tsp_ls(distanceMatrix1));  
let end = performance.now();
console.log("Test 1 Time: " + (end - start) + " milliseconds.");

// Test 2: 4 cities
let distanceMatrix2 = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
];

start = performance.now();
console.log("Test 2 Result:", tsp_ls(distanceMatrix2));  
end = performance.now();
console.log("Test 2 Time: " + (end - start) + " milliseconds.");

// Test 3: 2 cities (edge case, no traveling)
let distanceMatrix3 = [
    [0, 5],
    [5, 0]
];

start = performance.now();
console.log("Test 3 Result:", tsp_ls(distanceMatrix3));  
end = performance.now();
console.log("Test 3 Time: " + (end - start) + " milliseconds.");

// Test 4: 5 cities
let distanceMatrix4 = [
    [0, 10, 15, 20, 25],
    [10, 0, 35, 25, 30],
    [15, 35, 0, 30, 20],
    [20, 25, 30, 0, 15],
    [25, 30, 20, 15, 0]
];

start = performance.now();
console.log("Test 4 Result:", tsp_ls(distanceMatrix4));  
end = performance.now();
console.log("Test 4 Time: " + (end - start) + " milliseconds.");


let distanceMatrix21 = [
    [0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105],
    [10, 0, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],
    [15, 10, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90],
    [20, 15, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85],
    [25, 20, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80],
    [30, 25, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75],
    [35, 30, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70],
    [40, 35, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65],
    [45, 40, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60],
    [50, 45, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55],
    [55, 50, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50],
    [60, 55, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45],
    [65, 60, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35, 40],
    [70, 65, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30, 35],
    [75, 70, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25, 30],
    [80, 75, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20, 25],
    [85, 80, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15, 20],
    [90, 85, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10, 15],
    [95, 90, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5, 10],
    [100, 95, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0, 5],
    [105, 100, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40, 35, 30, 25, 20, 15, 10, 5, 0]
];

start = performance.now();
console.log("Test 5 Result:", tsp_hk(distanceMatrix21));  
end = performance.now();
console.log("Test 5 Time: " + (end - start) + "ms");
